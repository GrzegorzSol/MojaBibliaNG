#pragma hdrstop

#include "GsViewAllResourcesClass.h"
#include "uGlobalVar.h"
#include <System.IOUtils.hpp>
#include "GsViewAllResourcesDataImages.h" //Dane dla grafiki (Pojedyńcch obrazów i list obrazów)
//---------------------------------------------------------------------------
#pragma package(smart_init)
/*
#if defined(_DEBUGINFO_)
	GsDebugClass::WriteDebug(Format("", ARRAYOFCONST(( ))));
#endif
*/
//Dane dla kolumn
enum {enColumn_Name, enColumn_Comment, enColumn_TypeResource, enColumn_Size, enColumn_Path, enColumn_Count};
const UnicodeString cstrColumnNames[] = {"Nazwa zasobu", "Komentarz do zasobu", "Typ zasobu", "Wielkość", "Miejsce"};
//Dane dla grup
const UnicodeString cstrGroupName[] = {"Dostępne tłumaczenia", "Zarejestrowana grafika", "Lista komentarzy do wersetów", "Lista ulubionych wersetów"};

__fastcall GsViewAllResourcesClass::GsViewAllResourcesClass(TComponent* Owner) : TCustomListView(Owner)
/**
	OPIS METOD(FUNKCJI):
	OPIS ARGUMENTÓW:
	OPIS ZMIENNYCH:
	OPIS WYNIKU METODY(FUNKCJI):
*/
{
	this->_pImages = new TImageList(this);
	if(!this->_pImages) throw(Exception("Nie dokonano inicjalizacji objektu TImageList"));
	//---
  #if defined(_DEBUGINFO_)
	GsDebugClass::WriteDebug("GsViewAllResourcesClass");
#endif
	this->_pImages->ColorDepth = cd32Bit;     //Głębia kolorów przyszłych obrazków
	this->_pImages->DrawingStyle = dsTransparent;
	this->_InitAllImage();
	//---
	this->DoubleBuffered = true;
	this->ShowHint = true;
	this->OwnerDraw = true;
	this->ReadOnly = true;
	this->RowSelect = true;
	this->ViewStyle = vsReport;
	this->SmallImages  = this->_pImages;
	for(int iGroup=0; iGroup<enGroup_Count; iGroup++)
	{
		TListGroup *group = this->Groups->Add();
		if(group)
		{
			group->State = TListGroupStateSet() << lgsNormal << lgsCollapsible << lgsCollapsed;
			group->Header = cstrGroupName[iGroup];
			group->HeaderAlign = taCenter;
		}
	}
	this->GroupView = true;
  //---
	this->_CreateAllColumns();
}
//---------------------------------------------------------------------------
__fastcall GsViewAllResourcesClass::~GsViewAllResourcesClass()
/**
	OPIS METOD(FUNKCJI):
	OPIS ARGUMENTÓW:
	OPIS ZMIENNYCH:
	OPIS WYNIKU METODY(FUNKCJI):
*/
{

}
//---------------------------------------------------------------------------
void __fastcall GsViewAllResourcesClass::CreateWnd()
/**
	OPIS METOD(FUNKCJI):
	OPIS ARGUMENTÓW:
	OPIS ZMIENNYCH:
	OPIS WYNIKU METODY(FUNKCJI):
*/
{
	TCustomListView::CreateWnd();
	//Własny kod.
	this->_LoadAllResources();
}
//---------------------------------------------------------------------------
void __fastcall GsViewAllResourcesClass::DestroyWnd()
/**
	OPIS METOD(FUNKCJI):
	OPIS ARGUMENTÓW:
	OPIS ZMIENNYCH:
	OPIS WYNIKU METODY(FUNKCJI):
*/
{
	//Własny kod.
	TCustomListView::DestroyWnd();
}
//---------------------------------------------------------------------------
void __fastcall GsViewAllResourcesClass::DrawItem(TListItem* Item, const System::Types::TRect &Rect, Winapi::Windows::TOwnerDrawState State)
{
	TRect RectBounds = Item->DisplayRect(drBounds);
	TRect RectLabel = Item->DisplayRect(drLabel);
	TRect RectIcon = Item->DisplayRect(drIcon);
	TRect RectSubItem = RectBounds;
	UnicodeString ustrItem = Item->Caption;

	switch(Item->GroupID)
	{
		int iBook, iChap, iVers;

		case enGroup_Translate:
			this->Canvas->Brush->Color = clCream;
			ustrItem = TPath::GetFileNameWithoutExtension(Item->Caption);
		break;
		case enGroup_Graphics:
			this->Canvas->Brush->Color = clMoneyGreen;
			ustrItem = TPath::GetFileNameWithoutExtension(Item->Caption);
		break;
		case enGroup_CoomentFiles: //Plik z komentarzem
		{
			this->Canvas->Brush->Color = clWebLavenderBlush;
			iBook = ustrItem.SubString(1, 3).ToInt()-1;
			iChap = ustrItem.SubString(4, 3).ToInt();
			iVers = ustrItem.SubString(7, 3).ToInt();
			this->Canvas->Font->Style = TFontStyles() << fsBold;
      this->Canvas->Font->Color = clRed;
			ustrItem = Format("%s %d:%d", ARRAYOFCONST((GsReadBibleTextData::GsInfoAllBooks[iBook].FullNameBook, iChap, iVers)));
		}
		break;
		case enGroup_FavVers:
		{
      this->Canvas->Brush->Color = clWebBlanchedAlmond;
			iBook = ustrItem.SubString(1, 3).ToInt()-1;
			iChap = ustrItem.SubString(4, 3).ToInt();
			iVers = ustrItem.SubString(7, 3).ToInt();
			this->Canvas->Font->Style = TFontStyles() << fsBold;
      this->Canvas->Font->Color = clPurple;
			ustrItem = Format("%s %d:%d", ARRAYOFCONST((GsReadBibleTextData::GsInfoAllBooks[iBook].FullNameBook, iChap, iVers)));
    }
		break;
	}

	if(State.Contains(odSelected)) {this->Canvas->Brush->Color = clWebGreenYellow;}
  this->Canvas->FillRect(Rect);

	this->_pImages->Draw(this->Canvas, 0, (RectIcon.Top + (RectIcon.Height() / 2)) - (this->_pImages->Height / 2), Item->ImageIndex);
	DrawText(this->Canvas->Handle, ustrItem.c_str(), -1, &RectLabel, DT_SINGLELINE | DT_VCENTER | DT_END_ELLIPSIS);
	this->Canvas->Font->Style = TFontStyles();
  this->Canvas->Font->Color = this->Font->Color;
	for(int iColumn=1; iColumn<this->Columns->Count; iColumn++)
	{
		 //Wymiary następnej kolumny
		 RectSubItem.Left += this->Column[iColumn-1]->Width+1;
		 RectSubItem.Right = RectSubItem.Left + this->Column[iColumn]->Width;

		 if(iColumn == this->Columns->Count - 1) DrawText(this->Canvas->Handle, Item->SubItems->Strings[iColumn-1].c_str(), -1, &RectSubItem, DT_SINGLELINE | DT_VCENTER | DT_PATH_ELLIPSIS);
		 else DrawText(this->Canvas->Handle, Item->SubItems->Strings[iColumn-1].c_str(), -1, &RectSubItem, DT_SINGLELINE | DT_VCENTER | DT_END_ELLIPSIS);

	}
}
//---------------------------------------------------------------------------
void __fastcall GsViewAllResourcesClass::DoSelectItem(TListItem* Item, bool Selected)
/**
	OPIS METOD(FUNKCJI):
	OPIS ARGUMENTÓW:
	OPIS ZMIENNYCH:
	OPIS WYNIKU METODY(FUNKCJI):
*/
{
  if((this->ItemIndex == -1) || (!Selected)) return;	//Kliknąłeś poza pozycje listy
  //Jeśli istnieje zewnętrzna metoda OnDblClick() to ją wywołaj
	if(this->FOnSelectItem) this->FOnSelectItem(this, Item, Selected);
}
//---------------------------------------------------------------------------
void __fastcall GsViewAllResourcesClass::_CreateAllColumns()
/**
	OPIS METOD(FUNKCJI):
	OPIS ARGUMENTÓW:
	OPIS ZMIENNYCH:
	OPIS WYNIKU METODY(FUNKCJI):
*/
{
	TListColumn  *NewColumn;

	//Dodawanie kolumn
	for(unsigned int iColumns=0; iColumns<ARRAYSIZE(cstrColumnNames); iColumns++)
	{
		NewColumn = this->Columns->Add();
		NewColumn->Caption = cstrColumnNames[iColumns];
		if(iColumns==enColumn_Size) NewColumn->Width = -2; else NewColumn->AutoSize = true;
	}
}
//---------------------------------------------------------------------------
void __fastcall GsViewAllResourcesClass::_LoadAllResources()
/**
	OPIS METOD(FUNKCJI): Tworzenie kompletnej listy wszystkich zasobów
	OPIS ARGUMENTÓW:
	OPIS ZMIENNYCH:
	OPIS WYNIKU METODY(FUNKCJI):
*/
{
	TListItem *NewItem;
	TStringDynArray SDirList, SDirMultiMList, SDCommentFile;
	UnicodeString ustrExt, ustrTempLowerName, ustrMbinFile;
	__int64 i64Size;
	TFileStream *pFileStream;
	//Tworzenie listy katalogów z grafiką
	TStringList *SListTemp = new TStringList(); //Tymczasowy objekt, z zawartością wszystkich ścieżek dostępu do katalogów z multimediami
	if(!SListTemp) throw(Exception("Błąd inicjalizacji objektu TStringList"));
	SListTemp->Add(GlobalVar::Global_custrPathMultimediaFilesData);
	SListTemp->Add(GlobalVar::Global_ConfigFile->ReadString(GlobalVar::GlobalIni_MainSection_Main, GlobalVar::GlobalIni_PathMultiM1, ""));
	SListTemp->Add(GlobalVar::Global_ConfigFile->ReadString(GlobalVar::GlobalIni_MainSection_Main, GlobalVar::GlobalIni_PathMultiM2, ""));
	SListTemp->Add(GlobalVar::Global_ConfigFile->ReadString(GlobalVar::GlobalIni_MainSection_Main, GlobalVar::GlobalIni_PathMultiM3, ""));

	this->Items->BeginUpdate();
	//Lista tłumaczeń
	SDirList = TDirectory::GetFiles(GlobalVar::Global_custrGetDataDir);
	for(int i=0; i<SDirList.Length; i++)
	{
		ustrExt = TPath::GetExtension(SDirList[i]);

		if((ustrExt != GsReadBibleTextData::GsExtendNoAsteriskFileTranslateFull) &&     //Pełne tłumaczenie
			 (ustrExt != GsReadBibleTextData::GsExtendNoAsteriskFileTranslateGrecOrg) &&  //Grecki oryginał
			 (ustrExt != GsReadBibleTextData::GsExtendNoAsteriskFileTranslateHbrOrg)      //Hebrajski oryginał
			) continue;
		//---
		NewItem = this->Items->Add();
		if(NewItem)
		{
			NewItem->Caption = SDirList[i];
			NewItem->GroupID = enGroup_Translate;
			NewItem->ImageIndex = enImageRes_TranslationType;

			ustrMbinFile = TPath::ChangeExtension(SDirList[i], GsReadBibleTextData::GsExtendNoAsteriskTextInfoTranslate);
			if(TFile::Exists(ustrMbinFile))
			{
				#if defined(_DEBUGINFO_)
					//GsDebugClass::WriteDebug(Format("Path: %s", ARRAYOFCONST((ustrMbinFile))));
				#endif
			}
			//
			if(ustrExt == GsReadBibleTextData::GsExtendNoAsteriskFileTranslateFull) NewItem->SubItems->Add("Pełne tłumaczenie");
			else if(ustrExt == GsReadBibleTextData::GsExtendNoAsteriskFileTranslateGrecOrg) NewItem->SubItems->Add("Oryginalne greckie tłumaczenie");
			else if(ustrExt == GsReadBibleTextData::GsExtendNoAsteriskFileTranslateHbrOrg) NewItem->SubItems->Add("Oryginalne hebrajskie tłumaczenie");
			else NewItem->SubItems->Add("---");
			//
			if((ustrExt == GsReadBibleTextData::GsExtendNoAsteriskFileTranslateFull) ||     //Pełne tłumaczenie
				 (ustrExt == GsReadBibleTextData::GsExtendNoAsteriskFileTranslateGrecOrg) ||  //Grecki oryginał
				 (ustrExt == GsReadBibleTextData::GsExtendNoAsteriskFileTranslateHbrOrg)      //Hebrajski oryginał
				) NewItem->SubItems->Add("Tłumaczenie tekstu biblijnego"); else NewItem->SubItems->Add("---");
			//
			pFileStream = TFile::OpenRead(SDirList[i]);
			if(pFileStream)
			{
				NewItem->SubItems->Add(Format("%u", ARRAYOFCONST((pFileStream->Size))));
			}
			NewItem->SubItems->Add(TPath::GetDirectoryName(SDirList[i]));
		}
	}
	//Lista grafik
	for(int iSelectDir=0; iSelectDir<SListTemp->Count; iSelectDir++)
	{
    if(SListTemp->Strings[iSelectDir].IsEmpty()) continue;
		SDirMultiMList = TDirectory::GetFiles(SListTemp->Strings[iSelectDir]);
		for(int i=0; i<SDirMultiMList.Length; i++)
		{
			ustrTempLowerName = LowerCase(SDirMultiMList[i]);
			if((TPath::GetExtension(ustrTempLowerName) != ".jpg") &&
				 (TPath::GetExtension(ustrTempLowerName) != ".jpeg") &&
				 (TPath::GetExtension(ustrTempLowerName) != ".bmp")) continue;
			//---
			NewItem = this->Items->Add();
			if(NewItem)
			{
				NewItem->Caption = SDirMultiMList[i];
				NewItem->GroupID = enGroup_Graphics;
				NewItem->ImageIndex = enImageRes_Pictures;

				NewItem->SubItems->Add("Plik graficzny");
				NewItem->SubItems->Add("Grafika zarejestrowana w aplikacji");
				pFileStream = TFile::OpenRead(SDirMultiMList[i]);
				if(pFileStream)
				{
					NewItem->SubItems->Add(Format("%u", ARRAYOFCONST((pFileStream->Size))));
				}
				NewItem->SubItems->Add(TPath::GetDirectoryName(SDirMultiMList[i]));
			}
		}
		SDirMultiMList.Length = 0;
	}
	//Lista komentarzy
	SDCommentFile = TDirectory::GetFiles(GlobalVar::Global_custrPathdirComments);
	for(int i=0; i<SDCommentFile.Length; i++)
	{
		NewItem = this->Items->Add();
		if(NewItem)
		{
			NewItem->Caption = TPath::GetFileNameWithoutExtension(SDCommentFile[i]);
			NewItem->GroupID = enGroup_CoomentFiles;
      NewItem->ImageIndex = enImageRes_Comments;

			NewItem->SubItems->Add("Plik z komentarzami");
			NewItem->SubItems->Add("Plik z komentarzem, do wybranych wersetów");
			pFileStream = TFile::OpenRead(SDCommentFile[i]);
			if(pFileStream)
			{
				NewItem->SubItems->Add(Format("%u", ARRAYOFCONST((pFileStream->Size))));
			}
			NewItem->SubItems->Add(TPath::GetDirectoryName(SDCommentFile[i]));
		}
  }
	//Lista ulubionych wersetów
	if(TFile::Exists(GlobalVar::Global_custrPathFileFavoriteVers))
	{
		SListTemp->Clear();
		SListTemp->LoadFromFile(GlobalVar::Global_custrPathFileFavoriteVers);

		for(int i=0; i<SListTemp->Count; i++)
		{
			NewItem = this->Items->Add();
			if(NewItem)
			{
				NewItem->Caption = SListTemp->Strings[i];
				NewItem->GroupID = enGroup_FavVers;
        NewItem->ImageIndex = enImageRes_FavVers;
			}
			NewItem->SubItems->Add("Ulubiony werset");
			NewItem->SubItems->Add("Ulubione werset, wybrany przez użytkownika");
			NewItem->SubItems->Add(Format("%u", ARRAYOFCONST((SListTemp->Text.Length()+3))));
			NewItem->SubItems->Add(TPath::GetDirectoryName(GlobalVar::Global_custrPathFileFavoriteVers));
    }
	}
  //---
	if(SListTemp) delete SListTemp;
	this->Items->EndUpdate();
}
//---------------------------------------------------------------------------
void __fastcall GsViewAllResourcesClass::_InitAllImage()
/**
	OPIS METOD(FUNKCJI): Tworzenie listy obrazów
	OPIS ARGUMENTÓW:
	OPIS ZMIENNYCH:
	OPIS WYNIKU METODY(FUNKCJI):
*/
{
  TIcon *pIcon=0;
	TMemoryStream *pMemoryStr=0;

  try
	{
		pIcon = new TIcon();
		if(!pIcon) throw(Exception("Błąd metody TIcon"));
		pMemoryStr = new TMemoryStream();
		if(!pMemoryStr) throw(Exception("Błąd metody TMemoryStream"));
		//--- 0.Ikona - Tłumaczenie
		pMemoryStr->WriteBuffer(IMAGE_TRANSLATION, ARRAYSIZE(IMAGE_TRANSLATION)); //Zapis do strumienia danych
		pMemoryStr->Position = 0;                             //Ustawienia wskażnika strumienia na początek
		pIcon->LoadFromStream(pMemoryStr);                    //Wczytanie danych ze strumienia do objektu, klasy TIcon
		this->_pImages->AddIcon(pIcon);                				//Dodanie ikony do listu, objektu klasy TImageList
		pMemoryStr->Clear();
		//--- 1.Ikona - Grafika
    pMemoryStr->WriteBuffer(IMAGE_PICTURES, ARRAYSIZE(IMAGE_PICTURES)); //Zapis do strumienia danych
		pMemoryStr->Position = 0;                             //Ustawienia wskażnika strumienia na początek
		pIcon->LoadFromStream(pMemoryStr);                    //Wczytanie danych ze strumienia do objektu, klasy TIcon
		this->_pImages->AddIcon(pIcon);                				//Dodanie ikony do listu, objektu klasy TImageList
		pMemoryStr->Clear();
		//--- 2.Ikona - Komentarze
    pMemoryStr->WriteBuffer(IMAGE_COMMENTS, ARRAYSIZE(IMAGE_COMMENTS)); //Zapis do strumienia danych
		pMemoryStr->Position = 0;                             //Ustawienia wskażnika strumienia na początek
		pIcon->LoadFromStream(pMemoryStr);                    //Wczytanie danych ze strumienia do objektu, klasy TIcon
		this->_pImages->AddIcon(pIcon);                				//Dodanie ikony do listu, objektu klasy TImageList
		pMemoryStr->Clear();
		//--- 3.Ikona - Ulubione wersety
    pMemoryStr->WriteBuffer(IMAGE_FAVVERS, ARRAYSIZE(IMAGE_FAVVERS)); //Zapis do strumienia danych
		pMemoryStr->Position = 0;                             //Ustawienia wskażnika strumienia na początek
		pIcon->LoadFromStream(pMemoryStr);                    //Wczytanie danych ze strumienia do objektu, klasy TIcon
		this->_pImages->AddIcon(pIcon);                				//Dodanie ikony do listu, objektu klasy TImageList
		pMemoryStr->Clear();
	}
  __finally
	{
		//--- Zwolnienie objektu, klasy TIcon i TMemoryStream
		if(pIcon) {delete pIcon;}
		if(pMemoryStr) {delete pMemoryStr;}
	}
}
//---------------------------------------------------------------------------
